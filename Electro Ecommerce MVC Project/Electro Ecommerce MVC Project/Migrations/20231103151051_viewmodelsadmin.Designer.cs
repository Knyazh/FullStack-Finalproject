// <auto-generated />
using System;
using Electro_Ecommerce_MVC_Project.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Electro_Ecommerce_MVC_Project.Migrations
{
    [DbContext(typeof(EcommerceDbContext))]
    [Migration("20231103151051_viewmodelsadmin")]
    partial class viewmodelsadmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = -10,
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = " The iPhone 13 Pro is Apple's flagship smartphone, offering a stunning Super Retina XDR display, a powerful A15 Bionic chip, and a versatile triple-camera system for capturing high-quality photos and videos. With 5G connectivity, Face ID, and the latest iOS features, it's a top choice for those who demand performance and cutting-edge technology.",
                            Name = "Laptop",
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -9,
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = " The iPhone 13 Pro is Apple's flagship smartphone, offering a stunning Super Retina XDR display, a powerful A15 Bionic chip, and a versatile triple-camera system for capturing high-quality photos and videos. With 5G connectivity, Face ID, and the latest iOS features, it's a top choice for those who demand performance and cutting-edge technology.",
                            Name = "Phone",
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -8,
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = " The iPhone 13 Pro is Apple's flagship smartphone, offering a stunning Super Retina XDR display, a powerful A15 Bionic chip, and a versatile triple-camera system for capturing high-quality photos and videos. With 5G connectivity, Face ID, and the latest iOS features, it's a top choice for those who demand performance and cutting-edge technology.",
                            Name = "SmartWatches",
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -7,
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = " The iPhone 13 Pro is Apple's flagship smartphone, offering a stunning Super Retina XDR display, a powerful A15 Bionic chip, and a versatile triple-camera system for capturing high-quality photos and videos. With 5G connectivity, Face ID, and the latest iOS features, it's a top choice for those who demand performance and cutting-edge technology.",
                            Name = "4k Smart Tv",
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -6,
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = " The iPhone 13 Pro is Apple's flagship smartphone, offering a stunning Super Retina XDR display, a powerful A15 Bionic chip, and a versatile triple-camera system for capturing high-quality photos and videos. With 5G connectivity, Face ID, and the latest iOS features, it's a top choice for those who demand performance and cutting-edge technology.",
                            Name = "Gaming Consoles",
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = -7,
                            Code = "#fbff00",
                            CreatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Yellow",
                            UpdatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -5,
                            Code = "#000000",
                            CreatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Black",
                            UpdatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -4,
                            Code = "#666666",
                            CreatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Gray",
                            UpdatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -3,
                            Code = "#0052d6",
                            CreatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Blue",
                            UpdatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -2,
                            Code = "#ffffff",
                            CreatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "White",
                            UpdatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -1,
                            Code = "#ff0000",
                            CreatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Red",
                            UpdatedAt = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Memory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Count")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Memories");

                    b.HasData(
                        new
                        {
                            Id = -5,
                            Count = "64 GB",
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -4,
                            Count = "128 GB",
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -3,
                            Count = "256 GB",
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -2,
                            Count = "512GB",
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = -1,
                            Count = "1 TB",
                            CreatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedDate = new DateTime(2023, 10, 19, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalImageName")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.ProductColor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ColorId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.ProductMemory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "MemoryId");

                    b.HasIndex("MemoryId");

                    b.ToTable("ProductMemories");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.ProductCategory", b =>
                {
                    b.HasOne("Electro_Ecommerce_MVC_Project.Database.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electro_Ecommerce_MVC_Project.Database.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.ProductColor", b =>
                {
                    b.HasOne("Electro_Ecommerce_MVC_Project.Database.Models.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electro_Ecommerce_MVC_Project.Database.Models.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.ProductMemory", b =>
                {
                    b.HasOne("Electro_Ecommerce_MVC_Project.Database.Models.Memory", "Memory")
                        .WithMany("ProductMemories")
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Electro_Ecommerce_MVC_Project.Database.Models.Product", "Product")
                        .WithMany("ProductMemories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Memory", b =>
                {
                    b.Navigation("ProductMemories");
                });

            modelBuilder.Entity("Electro_Ecommerce_MVC_Project.Database.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductColors");

                    b.Navigation("ProductMemories");
                });
#pragma warning restore 612, 618
        }
    }
}
